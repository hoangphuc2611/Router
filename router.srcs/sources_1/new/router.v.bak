`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/28/2024 12:04:27 AM
// Design Name: 
// Module Name: router
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module router(
    input clk,
    input reset_n,
    input [15:0] din,
    input [15:0] frame_n,
    input [15:0] valid_n,
    output [15:0] dout,
    output [15:0] busy_n,
    output [15:0] valido_n,
    output [15:0] frameo_n
    );
    
    reg [3:0] address [15:0];
    reg [1:0] address_cnt [15:0];
    reg [3:0] in_sel [15:0];
    reg [3:0] in_sel_next [15:0];
     
    wire [15:0] out_sel_decoder [15:0];
    wire [15:0] out_sel_wire [15:0];
    wire [3:0] in_sel_wire [15:0];
    integer i, j;
    
    always @(posedge clk or negedge reset_n) begin
        if (!reset_n) begin
            for (i = 0; i < 16; i = i + 1) begin
                address[i] <= 4'b0;
                in_sel[i] <= 4'b0;
                in_sel_next[i] <= 4'b0;
            end
        end
        else begin
            // 16 shift registers to save address/destination port from din
            for (i = 0; i < 16; i = i + 1) begin
                if (address_cnt[i] == 2'b11 ) begin
                    address[i] <= {din[i], address[i][3:1]};
                    address_cnt[i] <= address_cnt[i] + 1;
                end
                // Register to save selected input port for the MUX
                in_sel_next[i] <= in_sel_wire[i];
                in_sel[i] <= in_sel_next[i];
            end
            
            
        end
    end
    
    
    genvar x;
    generate
        // Array of decoders to select output port for each input port
        for (x = 0; x < 16; x = x + 1) begin
            decoder4_16 out_sel_decode(.en(1'b1), .in(address[x]), .out(out_sel_decoder[x]));
        end
        for (x = 0; x < 16; x = x + 1) begin
            assign out_sel_wire[x] = {  out_sel_decoder[15][x],
                                        out_sel_decoder[14][x],
                                        out_sel_decoder[13][x],
                                        out_sel_decoder[12][x],
                                        out_sel_decoder[11][x],
                                        out_sel_decoder[10][x],
                                        out_sel_decoder[9][x],
                                        out_sel_decoder[8][x],
                                        out_sel_decoder[7][x],
                                        out_sel_decoder[6][x],
                                        out_sel_decoder[5][x],
                                        out_sel_decoder[4][x],
                                        out_sel_decoder[3][x],
                                        out_sel_decoder[2][x],
                                        out_sel_decoder[1][x],
                                        out_sel_decoder[0][x]};
        end
        // Array of modules to choose input port with higher priority and give the address to the MUX
        for (x = 0; x < 16; x = x + 1) begin
            priority_check priority_sel(.en(1'b1), .in(out_sel_wire[x]), .out(in_sel_wire[x]));
            assign dout[x] = din[in_sel[x]];
        end
        
        
//////////////////////////////////////////////////////////////////////////////////        
//    decoder4_16 out_sel_decode0(.en(1'b1), .in(address[0]), .out(out_sel_decoder[0]));
//    decoder4_16 out_sel_decode1(.en(1'b1), .in(address[1]), .out(out_sel_decoder[1]));
//    decoder4_16 out_sel_decode2(.en(1'b1), .in(address[2]), .out(out_sel_decoder[2]));
//    decoder4_16 out_sel_decode3(.en(1'b1), .in(address[3]), .out(out_sel_decoder[3]));
//    decoder4_16 out_sel_decode4(.en(1'b1), .in(address[4]), .out(out_sel_decoder[4]));
//    decoder4_16 out_sel_decode5(.en(1'b1), .in(address[5]), .out(out_sel_decoder[5]));
//    decoder4_16 out_sel_decode6(.en(1'b1), .in(address[6]), .out(out_sel_decoder[6]));
//    decoder4_16 out_sel_decode7(.en(1'b1), .in(address[7]), .out(out_sel_decoder[7]));
//    decoder4_16 out_sel_decode8(.en(1'b1), .in(address[8]), .out(out_sel_decoder[8]));
//    decoder4_16 out_sel_decode9(.en(1'b1), .in(address[9]), .out(out_sel_decoder[9]));
//    decoder4_16 out_sel_decode10(.en(1'b1), .in(address[10]), .out(out_sel_decoder[10]));
//    decoder4_16 out_sel_decode11(.en(1'b1), .in(address[11]), .out(out_sel_decoder[11]));
//    decoder4_16 out_sel_decode12(.en(1'b1), .in(address[12]), .out(out_sel_decoder[12]));
//    decoder4_16 out_sel_decode13(.en(1'b1), .in(address[13]), .out(out_sel_decoder[13]));
//    decoder4_16 out_sel_decode14(.en(1'b1), .in(address[14]), .out(out_sel_decoder[14]));
//    decoder4_16 out_sel_decode15(.en(1'b1), .in(address[15]), .out(out_sel_decoder[15]));
//////////////////////////////////////////////////////////////////////////////////  
    endgenerate
    
    
endmodule
